const ingestForm = document.getElementById("ingest-form");
const ingestStatus = document.getElementById("ingest-status");
const askForm = document.getElementById("ask-form");
const askStatus = document.getElementById("ask-status");
const answerContainer = document.getElementById("answer-container");
const answerEl = document.getElementById("answer");
const keywordsEl = document.getElementById("keywords");
const timelineContainer = document.getElementById("timeline");
const timelineItemsEl = document.getElementById("timeline-items");

async function postJSON(url, payload) {
    const response = await fetch(url, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
    });
    if (!response.ok) {
        const detail = await response.text();
        throw new Error(detail || response.statusText);
    }
    return response.json();
}

ingestForm?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const pdfDir = document.getElementById("pdfDir").value.trim();
    const workersValue = document.getElementById("workers").value.trim();

    if (!pdfDir) {
        ingestStatus.textContent = "Please provide a PDF directory path.";
        ingestStatus.className = "status error";
        return;
    }

    ingestStatus.textContent = "Ingesting...";
    ingestStatus.className = "status";

    try {
        const payload = { pdf_dir: pdfDir };
        if (workersValue) {
            payload.workers = Number(workersValue);
        }
        const result = await postJSON("/ingest", payload);
        ingestStatus.textContent = `Ingested successfully. Total papers indexed: ${result.total_papers}`;
        ingestStatus.className = "status success";
    } catch (error) {
        ingestStatus.textContent = `Failed to ingest: ${error.message}`;
        ingestStatus.className = "status error";
    }
});

askForm?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const question = document.getElementById("question").value.trim();
    const topK = Number(document.getElementById("topK").value) || 3;

    if (!question) {
        askStatus.textContent = "Please enter a question.";
        askStatus.className = "status error";
        return;
    }

    askStatus.textContent = "Thinking...";
    askStatus.className = "status";
    answerContainer.classList.add("hidden");
    if (timelineContainer) {
        timelineContainer.classList.add("hidden");
    }
    if (timelineItemsEl) {
        timelineItemsEl.innerHTML = "";
    }

    try {
        const result = await postJSON("/ask", { question, top_k: topK });

        askStatus.textContent = "Got an answer.";
        askStatus.className = "status success";

        answerEl.textContent = result.answer || "No answer returned.";

        keywordsEl.innerHTML = "";
        (result.keywords || []).forEach((kw) => {
            const li = document.createElement("li");
            li.textContent = kw;
            keywordsEl.appendChild(li);
        });

        if (timelineItemsEl && timelineContainer) {
            const sources = Array.isArray(result.sources) ? [...result.sources] : [];
            if (sources.length === 0) {
                timelineItemsEl.innerHTML = "<p class=\"timeline-empty\">No sources returned.</p>";
                timelineContainer.classList.remove("hidden");
            } else {
                const sortedSources = sources.sort((a, b) => {
                    const yearA = typeof a.year === "number" ? a.year : Number.MAX_SAFE_INTEGER;
                    const yearB = typeof b.year === "number" ? b.year : Number.MAX_SAFE_INTEGER;
                    if (yearA === yearB) {
                        return (b.score || 0) - (a.score || 0);
                    }
                    return yearA - yearB;
                });

                timelineItemsEl.innerHTML = "";
                sortedSources.forEach((source, index) => {
                    const item = document.createElement("div");
                    item.className = "timeline-item";

                    const marker = document.createElement("div");
                    marker.className = "timeline-marker";
                    const markerLabel = document.createElement("span");
                    markerLabel.textContent = source.year ? String(source.year) : "â€”";
                    marker.appendChild(markerLabel);

                    const content = document.createElement("div");
                    content.className = "timeline-content";

                    const title = document.createElement("h4");
                    title.textContent = source.title || "Untitled";

                    const meta = document.createElement("div");
                    meta.className = "timeline-meta";

                    const yearSpan = document.createElement("span");
                    yearSpan.textContent = `Year: ${source.year ?? "N/A"}`;

                    const journalSpan = document.createElement("span");
                    journalSpan.textContent = `Journal: ${source.journal || "Unknown"}`;

                    const authorSpan = document.createElement("span");
                    const authorList = Array.isArray(source.authors) ? source.authors.filter(Boolean) : [];
                    const limitedAuthors = authorList.slice(0, 4);
                    const authorLabel = limitedAuthors.length
                        ? limitedAuthors.join(", ") + (authorList.length > 4 ? " et al." : "")
                        : "Unknown";
                    authorSpan.textContent = `Authors: ${authorLabel}`;

                    const scoreSpan = document.createElement("span");
                    const score = typeof source.score === "number" ? source.score.toFixed(3) : "N/A";
                    scoreSpan.textContent = `Similarity score: ${score}`;

                    meta.appendChild(yearSpan);
                    meta.appendChild(journalSpan);
                    meta.appendChild(authorSpan);
                    meta.appendChild(scoreSpan);

                    const abstract = document.createElement("p");
                    abstract.className = "timeline-abstract";
                    abstract.textContent = source.abstract || "No abstract available.";

                    const path = document.createElement("div");
                    path.className = "timeline-path";
                    path.innerHTML = `<strong>PDF:</strong> <code>${source.pdf_path || "Unknown path"}</code>`;

                    content.appendChild(title);
                    content.appendChild(meta);
                    content.appendChild(abstract);
                    content.appendChild(path);

                    item.appendChild(marker);
                    item.appendChild(content);
                    timelineItemsEl.appendChild(item);
                });

                timelineContainer.classList.remove("hidden");
                timelineContainer.scrollLeft = 0;
            }
        }

        answerContainer.classList.remove("hidden");
    } catch (error) {
        askStatus.textContent = `Failed to answer: ${error.message}`;
        askStatus.className = "status error";
    }
});
